{"/home/travis/build/npmtest/node-npmtest-wechat/test.js":"/* istanbul instrument in package npmtest_wechat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wechat/lib.npmtest_wechat.js":"/* istanbul instrument in package npmtest_wechat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wechat = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wechat = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wechat/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wechat && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wechat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wechat\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wechat.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wechat.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wechat.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wechat.__dirname + '/lib.npmtest_wechat.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wechat/node_modules/wechat/index.js":"var wechat = require('./lib/wechat');\n// 等待回复\nwechat.List = require('./lib/list');\n// 事件\nwechat.Event = require('./lib/events');\n\nmodule.exports = wechat;\n","/home/travis/build/npmtest/node-npmtest-wechat/node_modules/wechat/lib/wechat.js":"var crypto = require('crypto');\nvar xml2js = require('xml2js');\nvar ejs = require('ejs');\nvar Session = require('./session');\nvar List = require('./list');\nvar WXBizMsgCrypt = require('wechat-crypto');\n\n/**\n * 检查签名\n */\nvar checkSignature = function (query, token) {\n  var signature = query.signature;\n  var timestamp = query.timestamp;\n  var nonce = query.nonce;\n\n  var shasum = crypto.createHash('sha1');\n  var arr = [token, timestamp, nonce].sort();\n  shasum.update(arr.join(''));\n\n  return shasum.digest('hex') === signature;\n};\n\n/*!\n * 响应模版\n */\nvar tpl = ['<xml>',\n    '<ToUserName><![CDATA[<%-toUsername%>]]></ToUserName>',\n    '<FromUserName><![CDATA[<%-fromUsername%>]]></FromUserName>',\n    '<CreateTime><%=createTime%></CreateTime>',\n    '<% if (msgType === \"device_event\" && (Event === \"subscribe_status\" || Event === \"unsubscribe_status\")) { %>',\n      '<% if (Event === \"subscribe_status\" || Event === \"unsubscribe_status\") { %>',\n        '<MsgType><![CDATA[device_status]]></MsgType>',\n        '<DeviceStatus><%=DeviceStatus%></DeviceStatus>',\n      '<% } else { %>',\n        '<MsgType><![CDATA[<%=msgType%>]]></MsgType>',\n        '<Event><![CDATA[<%-Event%>]]></Event>',\n      '<% } %>',\n    '<% } else { %>',\n      '<MsgType><![CDATA[<%=msgType%>]]></MsgType>',\n    '<% } %>',\n  '<% if (msgType === \"news\") { %>',\n    '<ArticleCount><%=content.length%></ArticleCount>',\n    '<Articles>',\n    '<% content.forEach(function(item){ %>',\n      '<item>',\n        '<Title><![CDATA[<%-item.title%>]]></Title>',\n        '<Description><![CDATA[<%-item.description%>]]></Description>',\n        '<PicUrl><![CDATA[<%-item.picUrl || item.picurl || item.pic %>]]></PicUrl>',\n        '<Url><![CDATA[<%-item.url%>]]></Url>',\n      '</item>',\n    '<% }); %>',\n    '</Articles>',\n  '<% } else if (msgType === \"music\") { %>',\n    '<Music>',\n      '<Title><![CDATA[<%-content.title%>]]></Title>',\n      '<Description><![CDATA[<%-content.description%>]]></Description>',\n      '<MusicUrl><![CDATA[<%-content.musicUrl || content.url %>]]></MusicUrl>',\n      '<HQMusicUrl><![CDATA[<%-content.hqMusicUrl || content.hqUrl %>]]></HQMusicUrl>',\n      '<% if (content.thumbMediaId) { %> ',\n      '<ThumbMediaId><![CDATA[<%-content.thumbMediaId || content.mediaId %>]]></ThumbMediaId>',\n      '<% } %>',\n    '</Music>',\n  '<% } else if (msgType === \"voice\") { %>',\n    '<Voice>',\n      '<MediaId><![CDATA[<%-content.mediaId%>]]></MediaId>',\n    '</Voice>',\n  '<% } else if (msgType === \"image\") { %>',\n    '<Image>',\n      '<MediaId><![CDATA[<%-content.mediaId%>]]></MediaId>',\n    '</Image>',\n  '<% } else if (msgType === \"video\") { %>',\n    '<Video>',\n      '<MediaId><![CDATA[<%-content.mediaId%>]]></MediaId>',\n      '<Title><![CDATA[<%-content.title%>]]></Title>',\n      '<Description><![CDATA[<%-content.description%>]]></Description>',\n    '</Video>',\n  '<% } else if (msgType === \"hardware\") { %>',\n    '<HardWare>',\n      '<MessageView><![CDATA[<%-HardWare.MessageView%>]]></MessageView>',\n      '<MessageAction><![CDATA[<%-HardWare.MessageAction%>]]></MessageAction>',\n    '</HardWare>',\n    '<FuncFlag>0</FuncFlag>',\n  '<% } else if (msgType === \"device_text\" || msgType === \"device_event\") { %>',\n    '<DeviceType><![CDATA[<%-DeviceType%>]]></DeviceType>',\n    '<DeviceID><![CDATA[<%-DeviceID%>]]></DeviceID>',\n    '<% if (msgType === \"device_text\") { %>',\n      '<Content><![CDATA[<%-content%>]]></Content>',\n    '<% } else if ((msgType === \"device_event\" && Event != \"subscribe_status\" && Event != \"unsubscribe_status\")) { %>',\n      '<Content><![CDATA[<%-content%>]]></Content>',\n      '<Event><![CDATA[<%-Event%>]]></Event>',\n    '<% } %>',\n      '<SessionID><%=SessionID%></SessionID>',\n  '<% } else if (msgType === \"transfer_customer_service\") { %>',\n    '<% if (content && content.kfAccount) { %>',\n      '<TransInfo>',\n        '<KfAccount><![CDATA[<%-content.kfAccount%>]]></KfAccount>',\n      '</TransInfo>',\n    '<% } %>',\n  '<% } else { %>',\n    '<Content><![CDATA[<%-content%>]]></Content>',\n  '<% } %>',\n  '</xml>'].join('');\n\n/*!\n * 编译过后的模版\n */\nvar compiled = ejs.compile(tpl);\n\nvar wrapTpl = '<xml>' +\n  '<Encrypt><![CDATA[<%-encrypt%>]]></Encrypt>' +\n  '<MsgSignature><![CDATA[<%-signature%>]]></MsgSignature>' +\n  '<TimeStamp><%-timestamp%></TimeStamp>' +\n  '<Nonce><![CDATA[<%-nonce%>]]></Nonce>' +\n'</xml>';\n\nvar encryptWrap = ejs.compile(wrapTpl);\n\nvar load = function (stream, callback) {\n  // support content-type 'text/xml' using 'express-xml-bodyparser', which set raw xml string\n  // to 'req.rawBody'(while latest body-parser no longer set req.rawBody), see\n  // https://github.com/macedigital/express-xml-bodyparser/blob/master/lib/types/xml.js#L79\n  if (stream.rawBody) {\n    callback(null, stream.rawBody);\n    return;\n  }\n\n  var buffers = [];\n  stream.on('data', function (trunk) {\n    buffers.push(trunk);\n  });\n  stream.on('end', function () {\n    callback(null, Buffer.concat(buffers));\n  });\n  stream.once('error', callback);\n};\n\n/*!\n * 从微信的提交中提取XML文件\n */\nvar getMessage = function (stream, callback) {\n  load(stream, function (err, buf) {\n    if (err) {\n      return callback(err);\n    }\n    var xml = buf.toString('utf-8');\n    stream.weixin_xml = xml;\n    xml2js.parseString(xml, {trim: true}, callback);\n  });\n};\n\n/*!\n * 将xml2js解析出来的对象转换成直接可访问的对象\n */\nvar formatMessage = function (result) {\n  var message = {};\n  if (typeof result === 'object') {\n    for (var key in result) {\n      if (!(result[key] instanceof Array) || result[key].length === 0) {\n        continue;\n      }\n      if (result[key].length === 1) {\n        var val = result[key][0];\n        if (typeof val === 'object') {\n          message[key] = formatMessage(val);\n        } else {\n          message[key] = (val || '').trim();\n        }\n      } else {\n        message[key] = [];\n        result[key].forEach(function (item) {\n          message[key].push(formatMessage(item));\n        });\n      }\n    }\n    return message;\n  } else {\n    return result;\n  }\n};\n\n/*!\n * 将内容回复给微信的封装方法\n */\nvar reply = function (content, fromUsername, toUsername, message) {\n  var info = {};\n  var type = 'text';\n  info.content = content || '';\n  info.createTime = new Date().getTime();\n  if (message && (message.MsgType === 'device_text' || message.MsgType === 'device_event')) {\n    info.DeviceType = message.DeviceType;\n    info.DeviceID = message.DeviceID;\n    info.SessionID = isNaN(message.SessionID) ? 0 : message.SessionID;\n    info.createTime = Math.floor(info.createTime / 1000);\n    if (message['Event'] === 'subscribe_status' || message['Event'] === 'unsubscribe_status') {\n      delete info.content;\n      info.DeviceStatus = isNaN(content) ? 0 : content;\n    } else {\n      if (!(content instanceof Buffer)) {\n        content = String(content);\n      }\n      info.content = new Buffer(content).toString('base64');\n    }\n    type = message.MsgType;\n    if (message.MsgType === 'device_event') {\n      info['Event'] = message['Event'];\n    }\n  } else if (Array.isArray(content)) {\n    type = 'news';\n  } else if (typeof content === 'object') {\n    if (content.hasOwnProperty('type')) {\n      type = content.type;\n      if (content.content) {\n        info.content = content.content;\n      }\n      if (content.HardWare) {\n        info.HardWare = content.HardWare;\n      }\n    } else {\n      type = 'music';\n    }\n  }\n  info.msgType = type;\n  info.toUsername = toUsername;\n  info.fromUsername = fromUsername;\n  return compiled(info);\n};\n\nvar reply2CustomerService = function (fromUsername, toUsername, kfAccount) {\n  var info = {};\n  info.msgType = 'transfer_customer_service';\n  info.createTime = new Date().getTime();\n  info.toUsername = toUsername;\n  info.fromUsername = fromUsername;\n  info.content = {};\n  if (typeof kfAccount === 'string') {\n    info.content.kfAccount = kfAccount;\n  }\n  return compiled(info);\n};\n\nvar respond = function (handler) {\n  return function (req, res, next) {\n    var message = req.weixin;\n    var callback = handler.getHandler(message.MsgType);\n\n    /**\n     * 根据条件对返回的XML数据加密\n     * @param xml\n     */\n    function encryptXml(xml) {\n      if (!req.query.encrypt_type || req.query.encrypt_type === 'raw') {\n        return xml;\n      } else {\n        // 判断是否已有前置cryptor\n        var cryptor = req.cryptor || handler.cryptor;\n        var wrap = {};\n        wrap.encrypt = cryptor.encrypt(xml);\n        wrap.nonce = parseInt((Math.random() * 100000000000), 10);\n        wrap.timestamp = new Date().getTime();\n        wrap.signature = cryptor.getSignature(wrap.timestamp, wrap.nonce, wrap.encrypt);\n        return encryptWrap(wrap);\n      }\n    }\n\n    res.reply = function (content) {\n      res.writeHead(200);\n      // 响应空字符串，用于响应慢的情况，避免微信重试\n      if (!content) {\n        return res.end('');\n      }\n\n      res.end(encryptXml(reply(content, message.ToUserName, message.FromUserName, message)));\n    };\n\n    // 响应消息，转到客服模式\n    res.transfer2CustomerService = function (kfAccount) {\n      res.writeHead(200);\n\n      res.end(encryptXml(reply2CustomerService(message.ToUserName, message.FromUserName, kfAccount)));\n    };\n\n    var done = function () {\n      // 如果session中有_wait标记\n      if (message.MsgType === 'text' && req.wxsession && req.wxsession._wait) {\n        var list = List.get(req.wxsession._wait);\n        var handle = list.get(message.Content);\n        var wrapper = function (message) {\n          return handler.handle ? function(req, res) {\n            res.reply(message);\n          } : function (info, req, res) {\n            res.reply(message);\n          };\n        };\n\n        // 如果回复命中规则，则用预置的方法回复\n        if (handle) {\n          callback = typeof handle === 'string' ? wrapper(handle) : handle;\n        }\n      }\n\n      // 兼容旧API\n      if (handler.handle) {\n        callback(req, res, next);\n      } else {\n        callback(message, req, res, next);\n      }\n    };\n\n    if (req.sessionStore) {\n      var storage = req.sessionStore;\n      var _end = res.end;\n      var openid = message.FromUserName + ':' + message.ToUserName;\n      res.end = function () {\n        _end.apply(res, arguments);\n        if (req.wxsession) {\n          req.wxsession.save();\n        }\n      };\n      // 等待列表\n      res.wait = function (name, callback) {\n        var list = List.get(name);\n        if (list) {\n          req.wxsession._wait = name;\n          res.reply(list.description);\n        } else {\n          var err = new Error('Undefined list: ' + name);\n          err.name = 'UndefinedListError';\n          res.writeHead(500);\n          res.end(err.name);\n          callback && callback(err);\n        }\n      };\n\n      // 清除等待列表\n      res.nowait = function () {\n        delete req.wxsession._wait;\n        res.reply.apply(res, arguments);\n      };\n\n      storage.get(openid, function (err, session) {\n        if (!session) {\n          req.wxsession = new Session(openid, req);\n          req.wxsession.cookie = req.session.cookie;\n        } else {\n          // add by xjmalm, convert string type to Date in case some of the session storage only stores the simple data types\n          if (session.cookie && 'string' === typeof session.cookie.expires) {\n            session.cookie.expires = new Date(session.cookie.expires);\n          }\n\n          req.wxsession = new Session(openid, req, session);\n        }\n        done();\n      });\n    } else {\n      done();\n    }\n  };\n};\n\n/**\n * 微信自动回复平台的内部的Handler对象\n * @param {String|Object} config 配置\n * @param {Function} handle handle对象\n */\nvar Handler = function (token, handle) {\n  if (token) {\n    this.setToken(token);\n  }\n  this.handlers = {};\n  this.handle = handle;\n};\n\nHandler.prototype.setToken = function (token) {\n  if (typeof token === 'string') {\n    this.token = token;\n    this.checkSignature = true;\n  } else {\n    this.token = token.token;\n    this.appid = token.appid;\n    this.encodingAESKey = token.encodingAESKey;\n    if (typeof token.checkSignature === 'undefined' || typeof token.checkSignature !== 'boolean') {\n      this.checkSignature = true;\n    } else {\n      this.checkSignature = token.checkSignature\n    }\n  }\n};\n\n/**\n * 设置handler对象\n * 按消息设置handler对象的快捷方式\n *\n * - `text(fn)`\n * - `image(fn)`\n * - `voice(fn)`\n * - `video(fn)`\n * - `location(fn)`\n * - `link(fn)`\n * - `event(fn)`\n * @param {String} type handler处理的消息类型\n * @param {Function} handle handle对象\n */\nHandler.prototype.setHandler = function (type, fn) {\n  this.handlers[type] = fn;\n  return this;\n};\n\n['text', 'image', 'voice', 'video', 'location', 'link', 'event', 'shortvideo', 'hardware', 'device_text', 'device_event'].forEach(function (method) {\n  Handler.prototype[method] = function (fn) {\n    return this.setHandler(method, fn);\n  };\n});\n\n/**\n * 根据消息类型取出handler对象\n * @param {String} type 消息类型\n */\nHandler.prototype.getHandler = function (type) {\n  return this.handle || this.handlers[type] || function (info, req, res, next) {\n    next();\n  };\n};\n\nvar serveEncrypt = function (that, req, res, next, _respond) {\n  var method = req.method;\n  // 加密模式\n  var signature = req.query.msg_signature;\n  var timestamp = req.query.timestamp;\n  var nonce = req.query.nonce;\n\n  // 判断是否已有前置cryptor\n  var cryptor = req.cryptor || that.cryptor;\n\n  if (method === 'GET') {\n    var echostr = req.query.echostr;\n    if (signature !== cryptor.getSignature(timestamp, nonce, echostr)) {\n      res.writeHead(401);\n      res.end('Invalid signature');\n      return;\n    }\n    var result = cryptor.decrypt(echostr);\n    // TODO 检查appId的正确性\n    res.writeHead(200);\n    res.end(result.message);\n  } else if (method === 'POST') {\n    load(req, function (err, buf) {\n      if (err) {\n        return next(err);\n      }\n      var xml = buf.toString('utf-8');\n      if (!xml) {\n        var emptyErr = new Error('body is empty');\n        emptyErr.name = 'Wechat';\n        return next(emptyErr);\n      }\n      xml2js.parseString(xml, {trim: true}, function (err, result) {\n        if (err) {\n          err.name = 'BadMessage' + err.name;\n          return next(err);\n        }\n        var xml = formatMessage(result.xml);\n        var encryptMessage = xml.Encrypt;\n        if (signature !== cryptor.getSignature(timestamp, nonce, encryptMessage)) {\n          res.writeHead(401);\n          res.end('Invalid signature');\n          return;\n        }\n        var decrypted = cryptor.decrypt(encryptMessage);\n        var messageWrapXml = decrypted.message;\n        if (messageWrapXml === '') {\n          res.writeHead(401);\n          res.end('Invalid appid');\n          return;\n        }\n        req.weixin_xml = messageWrapXml;\n        xml2js.parseString(messageWrapXml, {trim: true}, function (err, result) {\n          if (err) {\n            err.name = 'BadMessage' + err.name;\n            return next(err);\n          }\n          req.weixin = formatMessage(result.xml);\n          _respond(req, res, next);\n        });\n      });\n    });\n  } else {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  }\n};\n\n/**\n * 根据Handler对象生成响应方法，并最终生成中间件函数\n */\nHandler.prototype.middlewarify = function () {\n  var that = this;\n  if (this.encodingAESKey) {\n    that.cryptor = new WXBizMsgCrypt(this.token, this.encodingAESKey, this.appid);\n  }\n  var token = this.token;\n  var _respond = respond(this);\n  return function (req, res, next) {\n    // 如果已经解析过了，调用相关handle处理\n    if (req.weixin) {\n      _respond(req, res, next);\n      return;\n    }\n    if (req.query.encrypt_type && req.query.msg_signature) {\n      serveEncrypt(that, req, res, next, _respond);\n    } else {\n      var method = req.method;\n      // 动态token，在前置中间件中设置该值req.wechat_token，优先选用\n      if (that.checkSignature && !checkSignature(req.query, req.wechat_token || token)) {\n        res.writeHead(401);\n        res.end('Invalid signature');\n        return;\n      }\n      if (method === 'GET') {\n        res.writeHead(200);\n        res.end(req.query.echostr);\n      } else if (method === 'POST') {\n        getMessage(req, function (err, result) {\n          if (err) {\n            err.name = 'BadMessage' + err.name;\n            return next(err);\n          }\n          req.weixin = formatMessage(result.xml);\n          _respond(req, res, next);\n        });\n      } else {\n        res.writeHead(501);\n        res.end('Not Implemented');\n      }\n    }\n  };\n};\n\n/**\n * 根据口令\n *\n * Examples:\n * 使用wechat作为自动回复中间件的三种方式\n * ```\n * wechat(token, function (req, res, next) {});\n *\n * wechat(token, wechat.text(function (message, req, res, next) {\n *   // TODO\n * }).location(function (message, req, res, next) {\n *   // TODO\n * }));\n *\n * wechat(token)\n *   .text(function (message, req, res, next) {\n *     // TODO\n *   }).location(function (message, req, res, next) {\n *    // TODO\n *   }).middlewarify();\n * ```\n * 加密模式下token为config\n *\n * ```\n * var config = {\n *  token: 'token',\n *  appid: 'appid',\n *  encodingAESKey: 'encodinAESKey'\n * };\n * wechat(config, function (req, res, next) {});\n * ```\n *\n * 静态方法\n *\n * - `text`，处理文字推送的回调函数，接受参数为(text, req, res, next)。\n * - `image`，处理图片推送的回调函数，接受参数为(image, req, res, next)。\n * - `voice`，处理声音推送的回调函数，接受参数为(voice, req, res, next)。\n * - `video`，处理视频推送的回调函数，接受参数为(video, req, res, next)。\n * - `location`，处理位置推送的回调函数，接受参数为(location, req, res, next)。\n * - `link`，处理链接推送的回调函数，接受参数为(link, req, res, next)。\n * - `event`，处理事件推送的回调函数，接受参数为(event, req, res, next)。\n * - `shortvideo`，处理短视频推送的回调函数，接受参数为(event, req, res, next)。\n * @param {String} token 在微信平台填写的口令\n * @param {Function} handle 生成的回调函数，参见示例\n */\nvar middleware = function (token, handle) {\n  if (arguments.length === 1) {\n    return new Handler(token);\n  }\n\n  if (handle instanceof Handler) {\n    handle.setToken(token);\n    return handle.middlewarify();\n  } else {\n    return new Handler(token, handle).middlewarify();\n  }\n};\n\n['text', 'image', 'voice', 'video', 'shortvideo', 'location', 'link', 'event'].forEach(function (method) {\n  middleware[method] = function (fn) {\n    return (new Handler())[method](fn);\n  };\n});\n\nmiddleware.toXML = compiled;\nmiddleware.reply = reply;\nmiddleware.reply2CustomerService = reply2CustomerService;\nmiddleware.checkSignature = checkSignature;\n\nmodule.exports = middleware;\n","/home/travis/build/npmtest/node-npmtest-wechat/node_modules/wechat/lib/session.js":"/**\n * Session构造函数，用于与Connect的Session中间件集成的会话脚本\n * @param {String} id Session ID\n * @param {Object} req Connect中的请求对象\n * @param {Object} data 可选的其余数据，将被合并进Session对象中\n */\nvar Session = function (id, req, data) {\n  Object.defineProperty(this, 'id', { value: id });\n  Object.defineProperty(this, 'req', { value: req });\n  if (data) {\n    for (var key in data) {\n      this[key] = data[key];\n    }\n  }\n};\n\n/**\n * 保存Session对象到实际的存储中\n *\n * Callback:\n *\n * - `err`, 错误对象，保存发生错误时传入\n * @param {Function} callback 保存Session的回调函数\n */\nSession.prototype.save = function (callback) {\n  this.req.sessionStore.set(this.id, this, callback || function(){});\n  return this;\n};\n\n/**\n * 销毁Session对象\n *\n * Callback:\n *\n * - `err`, 错误对象，删除发生错误时传入\n * @param {Function} callback 从存储中删除Session数据后的回调函数\n */\nSession.prototype.destroy = function (callback) {\n  delete this.req.wxsession;\n  this.req.sessionStore.destroy(this.id, callback);\n  return this;\n};\n\nmodule.exports = Session;\n","/home/travis/build/npmtest/node-npmtest-wechat/node_modules/wechat/lib/list.js":"var util = require('util');\n/*!\n * 缓存列表\n */\nvar listCache = {};\n\n/**\n * 回复列表类型\n */\nvar List = function () {\n  this.map = {};\n};\n\n/**\n * 从List对象中根据key取出对应的handler\n * @param {String} key 列表中的关键词\n */\nList.prototype.get = function (key) {\n  return this.map[key];\n};\n\n/**\n * 静态方法，根据items生成List对象，并放置到缓存中\n * @param {String} name 列表名字\n * @param {Array} items 元素列表\n * @param {String} head 回复开头\n * @param {String} delimiter 回复分隔符\n * @param {String} foot 回复底部\n */\nList.add = function (name, items, head, delimiter, foot) {\n  var description = [];\n  var list = new List();\n  list.name = name;\n  items.forEach(function (item) {\n    var text = item[0];\n    // 抽取出key，并关联上对应的handle\n    var replaced = text.replace(/\\{(.*)\\}/, function (match, key) {\n      list.map[key] = item[1];\n      return key;\n    });\n    description.push(replaced);\n  });\n\n  if (delimiter) {\n    var lists = description.join('\\n' + delimiter + '\\n');\n    list.description = util.format('%s\\n%s\\n%s', head || '', lists, (foot || ''));\n  } else {\n    list.description = description.join('\\n');\n  }\n  listCache[name] = list;\n};\n\n/**\n * 静态方法，从缓存中根据名字取出List对象\n * @param {String} name 列表名字\n */\nList.get = function (name) {\n  return listCache[name];\n};\n\n/**\n * 静态方法，清空缓存的所有的List对象\n * @param {String} name 列表名字\n */\nList.clear = function () {\n  listCache = {};\n};\n\nmodule.exports = List;\n","/home/travis/build/npmtest/node-npmtest-wechat/node_modules/wechat-crypto/index.js":"module.exports = require('./lib/msg_crypto');\n","/home/travis/build/npmtest/node-npmtest-wechat/node_modules/wechat-crypto/lib/msg_crypto.js":"var crypto = require('crypto');\n\n/**\n * 提供基于PKCS7算法的加解密接口\n *\n */\nvar PKCS7Encoder = {};\n\n/**\n * 删除解密后明文的补位字符\n *\n * @param {String} text 解密后的明文\n */\nPKCS7Encoder.decode = function (text) {\n  var pad = text[text.length - 1];\n\n  if (pad < 1 || pad > 32) {\n    pad = 0;\n  }\n\n  return text.slice(0, text.length - pad);\n};\n\n/**\n * 对需要加密的明文进行填充补位\n *\n * @param {String} text 需要进行填充补位操作的明文\n */\nPKCS7Encoder.encode = function (text) {\n  var blockSize = 32;\n  var textLength = text.length;\n  //计算需要填充的位数\n  var amountToPad = blockSize - (textLength % blockSize);\n\n  var result = new Buffer(amountToPad);\n  result.fill(amountToPad);\n\n  return Buffer.concat([text, result]);\n};\n\n/**\n * 微信企业平台加解密信息构造函数\n *\n * @param {String} token          公众平台上，开发者设置的Token\n * @param {String} encodingAESKey 公众平台上，开发者设置的EncodingAESKey\n * @param {String} id         企业号的CorpId或者AppId\n */\nvar WXBizMsgCrypt = function (token, encodingAESKey, id) {\n  if (!token || !encodingAESKey || !id) {\n    throw new Error('please check arguments');\n  }\n  this.token = token;\n  this.id = id;\n  var AESKey = new Buffer(encodingAESKey + '=', 'base64');\n  if (AESKey.length !== 32) {\n    throw new Error('encodingAESKey invalid');\n  }\n  this.key = AESKey;\n  this.iv = AESKey.slice(0, 16);\n};\n\n/**\n * 获取签名\n *\n * @param {String} timestamp    时间戳\n * @param {String} nonce        随机数\n * @param {String} encrypt      加密后的文本\n */\nWXBizMsgCrypt.prototype.getSignature = function(timestamp, nonce, encrypt) {\n  var shasum = crypto.createHash('sha1');\n  var arr = [this.token, timestamp, nonce, encrypt].sort();\n  shasum.update(arr.join(''));\n\n  return shasum.digest('hex');\n};\n\n/**\n * 对密文进行解密\n *\n * @param {String} text 待解密的密文\n */\nWXBizMsgCrypt.prototype.decrypt = function(text) {\n  // 创建解密对象，AES采用CBC模式，数据采用PKCS#7填充；IV初始向量大小为16字节，取AESKey前16字节\n  var decipher = crypto.createDecipheriv('aes-256-cbc', this.key, this.iv);\n  decipher.setAutoPadding(false);\n  var deciphered = Buffer.concat([decipher.update(text, 'base64'), decipher.final()]);\n\n  deciphered = PKCS7Encoder.decode(deciphered);\n  // 算法：AES_Encrypt[random(16B) + msg_len(4B) + msg + $CorpID]\n  // 去除16位随机数\n  var content = deciphered.slice(16);\n  var length = content.slice(0, 4).readUInt32BE(0);\n\n  return {\n    message: content.slice(4, length + 4).toString(),\n    id: content.slice(length + 4).toString()\n  };\n};\n\n/**\n * 对明文进行加密\n *\n * @param {String} text 待加密的明文\n */\nWXBizMsgCrypt.prototype.encrypt = function (text) {\n  // 算法：AES_Encrypt[random(16B) + msg_len(4B) + msg + $CorpID]\n  // 获取16B的随机字符串\n  var randomString = crypto.pseudoRandomBytes(16);\n\n  var msg = new Buffer(text);\n\n  // 获取4B的内容长度的网络字节序\n  var msgLength = new Buffer(4);\n  msgLength.writeUInt32BE(msg.length, 0);\n\n  var id = new Buffer(this.id);\n\n  var bufMsg = Buffer.concat([randomString, msgLength, msg, id]);\n\n  // 对明文进行补位操作\n  var encoded = PKCS7Encoder.encode(bufMsg);\n\n  // 创建加密对象，AES采用CBC模式，数据采用PKCS#7填充；IV初始向量大小为16字节，取AESKey前16字节\n  var cipher = crypto.createCipheriv('aes-256-cbc', this.key, this.iv);\n  cipher.setAutoPadding(false);\n\n  var cipheredMsg = Buffer.concat([cipher.update(encoded), cipher.final()]);\n\n  // 返回加密数据的base64编码\n  return cipheredMsg.toString('base64');\n};\n\nmodule.exports = WXBizMsgCrypt;\n","/home/travis/build/npmtest/node-npmtest-wechat/node_modules/wechat/lib/events.js":"var Event = function () {\n  this.events = {};\n};\n\nEvent.prototype.add = function (event, callback) {\n  this.events[event] = callback;\n  return this;\n};\n\nEvent.prototype._dispatch = function (message, req, res, next) {\n  if (this.events[message.Event]) {\n    this.events[message.Event](message, req, res, next);\n  } else {\n    next();\n  }\n};\n\n/**\n * 分发消息\n * ```\n * var Event = require('wechat').Event;\n * var events = new Event();\n * events.add('pic_weixin', function (message, req, res, next) {\n *   // 弹出微信相册发图器的事件推送\n * });\n * var handle = Event.dispatch(events);\n * app.use('/wechat', wechat(config).event(handle).middlewarify());\n * ```\n */\nEvent.dispatch = function (event) {\n  return function (message, req, res, next) {\n    // message为事件内容\n    // { ToUserName: 'gh_d3e07d51b513',\n    // FromUserName: 'oPKu7jgOibOA-De4u8J2RuNKpZRw',\n    // CreateTime: '1359125022',\n    // MsgType: 'event',\n    // Event: 'LOCATION',\n    // Latitude: '23.137466',\n    // Longitude: '113.352425',\n    // Precision: '119.385040',\n    // MsgId: '5837397520665436492' }\n    event._dispatch(message, req, res, next);\n  };\n};\n\nmodule.exports = Event;\n"}